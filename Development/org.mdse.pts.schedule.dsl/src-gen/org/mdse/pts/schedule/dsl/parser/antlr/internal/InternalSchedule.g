/*
 * generated by Xtext 2.21.0
 */
grammar InternalSchedule;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.mdse.pts.schedule.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mdse.pts.schedule.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mdse.pts.schedule.dsl.services.ScheduleGrammarAccess;

}

@parser::members {

 	private ScheduleGrammarAccess grammarAccess;

    public InternalScheduleParser(TokenStream input, ScheduleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Schedule";
   	}

   	@Override
   	protected ScheduleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSchedule
entryRuleSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScheduleRule()); }
	iv_ruleSchedule=ruleSchedule
	{ $current=$iv_ruleSchedule.current; }
	EOF;

// Rule Schedule
ruleSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='schedule'
		{
			newLeafNode(otherlv_0, grammarAccess.getScheduleAccess().getScheduleKeyword_0());
		}
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getScheduleAccess().getForKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScheduleRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getScheduleAccess().getNetworkNetworkCrossReference_2_0());
				}
			)
		)
		otherlv_3='with'
		{
			newLeafNode(otherlv_3, grammarAccess.getScheduleAccess().getWithKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScheduleRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getScheduleAccess().getDepotsDepotCrossReference_4_0());
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getScheduleAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getScheduleRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getScheduleAccess().getDepotsDepotCrossReference_5_1_0());
					}
				)
			)
		)*
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getScheduleAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleAccess().getTrainSchedulesTrainScheduleParserRuleCall_7_0());
				}
				lv_trainSchedules_8_0=ruleTrainSchedule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleRule());
					}
					add(
						$current,
						"trainSchedules",
						lv_trainSchedules_8_0,
						"org.mdse.pts.schedule.dsl.Schedule.TrainSchedule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTrainSchedule
entryRuleTrainSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrainScheduleRule()); }
	iv_ruleTrainSchedule=ruleTrainSchedule
	{ $current=$iv_ruleTrainSchedule.current; }
	EOF;

// Rule TrainSchedule
ruleTrainSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='train'
		{
			newLeafNode(otherlv_0, grammarAccess.getTrainScheduleAccess().getTrainKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainScheduleRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTrainScheduleAccess().getTrainTrainCrossReference_1_0());
				}
			)
		)
		otherlv_2='on'
		{
			newLeafNode(otherlv_2, grammarAccess.getTrainScheduleAccess().getOnKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrainScheduleAccess().getDateTimesDateTimeParserRuleCall_3_0());
				}
				lv_dateTimes_3_0=ruleDateTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrainScheduleRule());
					}
					add(
						$current,
						"dateTimes",
						lv_dateTimes_3_0,
						"org.mdse.pts.schedule.dsl.Schedule.DateTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getTrainScheduleAccess().getCommaKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTrainScheduleAccess().getDateTimesDateTimeParserRuleCall_4_0_1_0());
						}
						lv_dateTimes_5_0=ruleDateTime
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTrainScheduleRule());
							}
							add(
								$current,
								"dateTimes",
								lv_dateTimes_5_0,
								"org.mdse.pts.schedule.dsl.Schedule.DateTime");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6='and'
			{
				newLeafNode(otherlv_6, grammarAccess.getTrainScheduleAccess().getAndKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTrainScheduleAccess().getDateTimesDateTimeParserRuleCall_4_2_0());
					}
					lv_dateTimes_7_0=ruleDateTime
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrainScheduleRule());
						}
						add(
							$current,
							"dateTimes",
							lv_dateTimes_7_0,
							"org.mdse.pts.schedule.dsl.Schedule.DateTime");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=':'
		{
			newLeafNode(otherlv_8, grammarAccess.getTrainScheduleAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrainScheduleAccess().getRouteRouteParserRuleCall_6_0());
				}
				lv_route_9_0=ruleRoute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrainScheduleRule());
					}
					set(
						$current,
						"route",
						lv_route_9_0,
						"org.mdse.pts.schedule.dsl.Schedule.Route");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDateTime
entryRuleDateTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateTimeRule()); }
	iv_ruleDateTime=ruleDateTime
	{ $current=$iv_ruleDateTime.current; }
	EOF;

// Rule DateTime
ruleDateTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDateTimeAccess().getWeekdayWeekDaysEnumRuleCall_0_0());
				}
				lv_weekday_0_0=ruleWeekDays
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDateTimeRule());
					}
					add(
						$current,
						"weekday",
						lv_weekday_0_0,
						"org.mdse.pts.schedule.dsl.Schedule.WeekDays");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getDateTimeAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDateTimeAccess().getWeekdayWeekDaysEnumRuleCall_1_1_0());
					}
					lv_weekday_2_0=ruleWeekDays
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateTimeRule());
						}
						add(
							$current,
							"weekday",
							lv_weekday_2_0,
							"org.mdse.pts.schedule.dsl.Schedule.WeekDays");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3='at'
		{
			newLeafNode(otherlv_3, grammarAccess.getDateTimeAccess().getAtKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDateTimeAccess().getTimeTimeParserRuleCall_3_0());
				}
				lv_time_4_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDateTimeRule());
					}
					set(
						$current,
						"time",
						lv_time_4_0,
						"org.mdse.pts.schedule.dsl.Schedule.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_hours_0_0=RULE_INT
				{
					newLeafNode(lv_hours_0_0, grammarAccess.getTimeAccess().getHoursINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"hours",
						lv_hours_0_0,
						"org.mdse.pts.schedule.dsl.Schedule.INT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeAccess().getColonKeyword_1());
		}
		(
			(
				lv_minutes_2_0=RULE_INT
				{
					newLeafNode(lv_minutes_2_0, grammarAccess.getTimeAccess().getMinutesINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"minutes",
						lv_minutes_2_0,
						"org.mdse.pts.schedule.dsl.Schedule.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleRoute
entryRuleRoute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRouteRule()); }
	iv_ruleRoute=ruleRoute
	{ $current=$iv_ruleRoute.current; }
	EOF;

// Rule Route
ruleRoute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getStartSpotStartSpotParserRuleCall_0_0());
				}
				lv_startSpot_0_0=ruleStartSpot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					set(
						$current,
						"startSpot",
						lv_startSpot_0_0,
						"org.mdse.pts.schedule.dsl.Schedule.StartSpot");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getMiddleSpotsMiddleSpotParserRuleCall_1_0());
				}
				lv_middleSpots_1_0=ruleMiddleSpot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"middleSpots",
						lv_middleSpots_1_0,
						"org.mdse.pts.schedule.dsl.Schedule.MiddleSpot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getFinalSpotFinalSpotParserRuleCall_2_0());
				}
				lv_finalSpot_2_0=ruleFinalSpot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					set(
						$current,
						"finalSpot",
						lv_finalSpot_2_0,
						"org.mdse.pts.schedule.dsl.Schedule.FinalSpot");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStartSpot
entryRuleStartSpot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartSpotRule()); }
	iv_ruleStartSpot=ruleStartSpot
	{ $current=$iv_ruleStartSpot.current; }
	EOF;

// Rule StartSpot
ruleStartSpot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartSpotAccess().getStartKeyword_0());
		}
		otherlv_1='at'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartSpotAccess().getAtKeyword_1());
		}
		(
			(
				lv_station_2_0=RULE_STRING
				{
					newLeafNode(lv_station_2_0, grammarAccess.getStartSpotAccess().getStationSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartSpotRule());
					}
					setWithLastConsumed(
						$current,
						"station",
						lv_station_2_0,
						"org.mdse.pts.schedule.dsl.Schedule.STRING");
				}
			)
		)
		(
			otherlv_3='on'
			{
				newLeafNode(otherlv_3, grammarAccess.getStartSpotAccess().getOnKeyword_3_0());
			}
			otherlv_4='platform'
			{
				newLeafNode(otherlv_4, grammarAccess.getStartSpotAccess().getPlatformKeyword_3_1());
			}
			(
				(
					lv_platform_5_0=RULE_STRING
					{
						newLeafNode(lv_platform_5_0, grammarAccess.getStartSpotAccess().getPlatformSTRINGTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStartSpotRule());
						}
						setWithLastConsumed(
							$current,
							"platform",
							lv_platform_5_0,
							"org.mdse.pts.schedule.dsl.Schedule.STRING");
					}
				)
			)
		)?
		(
			otherlv_6='drive'
			{
				newLeafNode(otherlv_6, grammarAccess.getStartSpotAccess().getDriveKeyword_4_0());
			}
			otherlv_7='via'
			{
				newLeafNode(otherlv_7, grammarAccess.getStartSpotAccess().getViaKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStartSpotRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getStartSpotAccess().getLegLegCrossReference_4_2_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMiddleSpot
entryRuleMiddleSpot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMiddleSpotRule()); }
	iv_ruleMiddleSpot=ruleMiddleSpot
	{ $current=$iv_ruleMiddleSpot.current; }
	EOF;

// Rule MiddleSpot
ruleMiddleSpot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='stop'
		{
			newLeafNode(otherlv_0, grammarAccess.getMiddleSpotAccess().getStopKeyword_0());
		}
		otherlv_1='at'
		{
			newLeafNode(otherlv_1, grammarAccess.getMiddleSpotAccess().getAtKeyword_1());
		}
		(
			(
				lv_station_2_0=RULE_STRING
				{
					newLeafNode(lv_station_2_0, grammarAccess.getMiddleSpotAccess().getStationSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMiddleSpotRule());
					}
					setWithLastConsumed(
						$current,
						"station",
						lv_station_2_0,
						"org.mdse.pts.schedule.dsl.Schedule.STRING");
				}
			)
		)
		(
			otherlv_3='on'
			{
				newLeafNode(otherlv_3, grammarAccess.getMiddleSpotAccess().getOnKeyword_3_0());
			}
			otherlv_4='platform'
			{
				newLeafNode(otherlv_4, grammarAccess.getMiddleSpotAccess().getPlatformKeyword_3_1());
			}
			(
				(
					lv_platform_5_0=RULE_STRING
					{
						newLeafNode(lv_platform_5_0, grammarAccess.getMiddleSpotAccess().getPlatformSTRINGTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMiddleSpotRule());
						}
						setWithLastConsumed(
							$current,
							"platform",
							lv_platform_5_0,
							"org.mdse.pts.schedule.dsl.Schedule.STRING");
					}
				)
			)
		)?
		(
			otherlv_6='for'
			{
				newLeafNode(otherlv_6, grammarAccess.getMiddleSpotAccess().getForKeyword_4_0());
			}
			(
				(
					lv_waitingTime_7_0=RULE_INT
					{
						newLeafNode(lv_waitingTime_7_0, grammarAccess.getMiddleSpotAccess().getWaitingTimeINTTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMiddleSpotRule());
						}
						setWithLastConsumed(
							$current,
							"waitingTime",
							lv_waitingTime_7_0,
							"org.mdse.pts.schedule.dsl.Schedule.INT");
					}
				)
			)
			otherlv_8='min'
			{
				newLeafNode(otherlv_8, grammarAccess.getMiddleSpotAccess().getMinKeyword_4_2());
			}
		)?
		(
			(
				lv_turnStation_9_0='and turn'
				{
					newLeafNode(lv_turnStation_9_0, grammarAccess.getMiddleSpotAccess().getTurnStationAndTurnKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMiddleSpotRule());
					}
					setWithLastConsumed($current, "turnStation", true, "and turn");
				}
			)
		)?
		(
			otherlv_10='drive'
			{
				newLeafNode(otherlv_10, grammarAccess.getMiddleSpotAccess().getDriveKeyword_6_0());
			}
			otherlv_11='via'
			{
				newLeafNode(otherlv_11, grammarAccess.getMiddleSpotAccess().getViaKeyword_6_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMiddleSpotRule());
						}
					}
					otherlv_12=RULE_ID
					{
						newLeafNode(otherlv_12, grammarAccess.getMiddleSpotAccess().getLegLegCrossReference_6_2_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFinalSpot
entryRuleFinalSpot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFinalSpotRule()); }
	iv_ruleFinalSpot=ruleFinalSpot
	{ $current=$iv_ruleFinalSpot.current; }
	EOF;

// Rule FinalSpot
ruleFinalSpot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='terminate'
		{
			newLeafNode(otherlv_0, grammarAccess.getFinalSpotAccess().getTerminateKeyword_0());
		}
		otherlv_1='at'
		{
			newLeafNode(otherlv_1, grammarAccess.getFinalSpotAccess().getAtKeyword_1());
		}
		(
			(
				lv_station_2_0=RULE_STRING
				{
					newLeafNode(lv_station_2_0, grammarAccess.getFinalSpotAccess().getStationSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFinalSpotRule());
					}
					setWithLastConsumed(
						$current,
						"station",
						lv_station_2_0,
						"org.mdse.pts.schedule.dsl.Schedule.STRING");
				}
			)
		)
		(
			otherlv_3='on'
			{
				newLeafNode(otherlv_3, grammarAccess.getFinalSpotAccess().getOnKeyword_3_0());
			}
			otherlv_4='platform'
			{
				newLeafNode(otherlv_4, grammarAccess.getFinalSpotAccess().getPlatformKeyword_3_1());
			}
			(
				(
					lv_platform_5_0=RULE_STRING
					{
						newLeafNode(lv_platform_5_0, grammarAccess.getFinalSpotAccess().getPlatformSTRINGTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFinalSpotRule());
						}
						setWithLastConsumed(
							$current,
							"platform",
							lv_platform_5_0,
							"org.mdse.pts.schedule.dsl.Schedule.STRING");
					}
				)
			)
		)?
	)
;

// Rule WeekDays
ruleWeekDays returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Monday'
			{
				$current = grammarAccess.getWeekDaysAccess().getMONDAYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getWeekDaysAccess().getMONDAYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Tuesday'
			{
				$current = grammarAccess.getWeekDaysAccess().getTUESDAYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getWeekDaysAccess().getTUESDAYEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Wednesday'
			{
				$current = grammarAccess.getWeekDaysAccess().getWEDNESDAYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getWeekDaysAccess().getWEDNESDAYEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Thursday'
			{
				$current = grammarAccess.getWeekDaysAccess().getTHURSDAYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getWeekDaysAccess().getTHURSDAYEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Friday'
			{
				$current = grammarAccess.getWeekDaysAccess().getFRIDAYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getWeekDaysAccess().getFRIDAYEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Saturday'
			{
				$current = grammarAccess.getWeekDaysAccess().getSATURDAYEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getWeekDaysAccess().getSATURDAYEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Sunday'
			{
				$current = grammarAccess.getWeekDaysAccess().getSUNDAYEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getWeekDaysAccess().getSUNDAYEnumLiteralDeclaration_6());
			}
		)
	)
;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

fragment RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('_'|RULE_LETTER) ('_'|RULE_LETTER|RULE_DIGIT)*;

RULE_INT : RULE_DIGIT+;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
